mean_seats = mean(seats))
arrange(desc(mean_seats))
umd_courses |>
group_by(department) |>
summarise (
total_seats = sum(seats),
mean_seats = mean(seats))
umd_courses |>
group_by(department) |>
summarise (
total_seats = sum(seats),
mean_seats = mean(seats)) }>
umd_courses |>
group_by(department) |>
summarise (
total_seats = sum(seats),
mean_seats = mean(seats)) |>
arrange(desc(mean_seats))
umd_courses |>
group_by(title)
summarise(count_id = n(
))
umd_courses |>
group_by(title)
summarise(count_id = n())
umd_courses |>
group_by(title)
summarise(
count_id = n()
) |>
arrange(desc(total_id))
umd_courses |>
group_by(title)
summarise(
count_classes = n())
umd_courses |>
group_by(title) |>
summarise(
count_id = n()
)
umd_courses |>
group_by(title) |>
summarise(
count_id = n()
) |>
arrange(desc(count_id))
umd_courses |>
group_by(department, instructor)
umd_courses |>
group_by(department, instructors)
umd_courses |>
group_by(department, instructors) |>
summarize(count_classes = n())
umd_courses |>
group_by(department, instructors) |>
summarize(count_classes = n())
arrange(desc(count_classes))
umd_courses |>
group_by(department, instructors) |>
summarize(count_classes = n())
umd_courses |>
group_by(department, instructors) |>
summarize(count_classes = n()) |>
arrange(desc(count_classes))
umd_courses |>
group_by(id, title) |>
summarise(count_classes = n())
umd_courses |>
group_by(id, title,term) |>
summarise(count_classes = n())
umd_courses |>
group_by(id, title,term) |>
summarise(count_classes = n())
arrange(desc(count_classes))
umd_courses |>
group_by(id, title,term) |>
summarise(count_classes = n())
|> arrange(desc(count_classes))
umd_courses |>
group_by(id, title,term) |>
summarise(count_classes = n()) |>
arrange(desc(count_classes))
umd_courses |>
group_by(id, title,term) |>
summarise(
count_classes = n(),
total_seats=sum(seats)
|>
arrange(desc(sum_seats))
umd_courses |>
group_by(id, title,term) |>
summarise(
count_classes = n(),
total_seats=sum(seats)
umd_courses |>
group_by(id, title,term) |>
summarise(
count_classes = n(),
total_seats= sum(seats))
umd_courses |>
group_by(id, title,term) |>
summarise(
count_classes = n(),
total_seats= sum(seats))
|>
umd_courses |>
group_by(id, title,term) |>
summarise(
count_classes = n(),
total_seats= sum(seats)) |>
arrange(desc(total_seats))
umd_courses |>
group_by(id, title,term) |>
summarise(
total_seats= sum(seats)) |>
arrange(desc(total_seats))
umd_courses |>
group_by(title, term) |>
summarise(
count_id = n()
) |>
arrange(desc(count_id))
umd_courses |>
group_by(title) |>
summarise(
count_id = n()
) |>
arrange(desc(count_id))
umd_courses |>
group_by(id, title) |>
summarise(
count_id = n()
) |>
arrange(desc(count_id))
umd_courses |>
group_by(title) |>
summarise(
count_id = n()
) |>
arrange(desc(count_id))
umd_courses |>
group_by(id, title) |>
summarise(
count_id = n()
) |>
arrange(desc(count_id))
knitr::opts_chunk$set(echo = TRUE)
install.packages('refinr')
# turn off sci notation
options(scipen=999)
library(tidyverse)
library(lubridate)
library(refinr)
# Load data
md_grant_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
# Display it
md_grant_loans
# Now let's try and group and count the number of expenditures by recipient. To make it a bit more manageable, let's use another string function from `stringr` and filter for recipients that start with the uppercase "W" or lowercase "w" using the function `str_detect()` with a regular expression.
# The filter function in the codeblock below says: look in the Grantee column, and pluck out any value that starts with (the "^" symbol means "starts with") a lowercase "w" OR (the vertical "|", called a pipe, means OR) an uppercase "W".
md_grant_loans |>
group_by(Grantee) |>
summarise(
count=n()
) |>
filter(str_detect(Grantee, '^w|^W')) |>
arrange(Grantee)
cleaned_md_grant_loans <- md_grant_loans |>
mutate(grantee_clean=key_collision_merge(Grantee)) |>
select(Grantee, grantee_clean, everything())
cleaned_md_grant_loans
cleaned_md_grant_loans |>
group_by(Grantee, grantee_clean) |>
summarise(
count=n()
) |>
filter(str_detect(Grantee, '^w|^W')) |>
arrange(Grantee)
cleaned_md_grant_loans <- md_grant_loans |>
mutate(grantee_clean=n_gram_merge(Grantee)) |>
select(Grantee, grantee_clean, everything())
cleaned_md_grant_loans
cleaned_md_grant_loans |>
group_by(Grantee, grantee_clean) |>
summarise(
count=n()
) |>
filter(str_detect(Grantee, '^w|^W')) |>
arrange(Grantee)
View(cleaned_md_grant_loans)
cleaned_md_grant_loans |>
group_by(Grantee, grantee_clean) |>
summarise(
count=n()
) |>
filter(str_detect(Grantee, '^w|^W')) |>
arrange(Grantee)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
read_csv("fatal-police-shootings-data.csv")
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
read_csv("fatal-police-shootings-data.csv")
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
read_csv("fatal-police-shootings-data.csv")
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd(~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
library(tidyverse)
library(lubridate)
library(janitor)
read_csv("fatal-police-shootings-data.csv")
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
library(tidyverse)
library(lubridate)
library(janitor)
library(dplyr)
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
library(dplyr)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<"2020-09-04") |>
summarize(count = n())
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date<'2020-09-04') |>
summarize(count = n())
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date < "2020-09-04") |>
summarize(count = n())
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
#note to team - I'm having trouble getting this to run, I think because it's not recognizing the date as a date.
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date < "2020-09-04") |>
summarize(count = n())
#note to team - I'm having trouble getting this to run, I think because it's not recognizing the date as a date.
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Display results of code below this codeblock
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
library(dplyr)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
#note to team - I'm having trouble getting this to run, I think because it's not recognizing the date as a date.
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |>
filter(date < "2020-09-04") |>
summarize(count = n())
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |> mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |> mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |> mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |> mutate(date=mdy(date))
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
library(dplyr)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
read_csv("fatal-police-shootings-data.csv")
fatal_police_shootings <- read.csv("fatal-police-shootings-data.csv")
women_fatal_police_shootings <- fatal_police_shootings %>%
filter(str_detect(gender, "female"))
count_women_police_shootings <- women_fatal_police_shootings %>%
summarize(count = n())
## cleaning the column names so I won't have trouble later on
clean_women_fatal_police_shootings <- women_fatal_police_shootings %>%
clean_names()
clean_2020_women_fatal_police_shootings <- clean_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings |> mutate(date=mdy(date))
# Put code to reverse engineer sentence here
clean_2020_women_fatal_police_shootings <- clean_2020_women_fatal_police_shootings %>%
filter(date<"2020-09-04") %>%
summarize(count = n())
clean_2020_women_fatal_police_shootings
# Display results of code below this codeblock
View(fatal_police_shootings)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(janitor)
police_shootings |>
filter(date == "2023-09-03")
library(tidyverse)
library(lubridate)
library(janitor)
police_shootings <- read_csv("fatal-police-shootings-data.csv")
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
police_shootings <- read_csv("fatal-police-shootings-data.csv")
setwd("~/data_journalism/data_journalism_fall_2023/major_assignments/reverse_engineering/Reverse-Engineering-Project/data")
police_shootings <- read_csv("fatal-police-shootings-data.csv")
police_shootings
police_shootings |>
filter(date == "2023-09-03")
police_shootings |>
filter(date == "2020-09-03")
police_shootings |>
filter(date == "2019-09-03")
